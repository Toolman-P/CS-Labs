                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4e001000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f63801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f70001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x036: 71f800000000000000   | 	jle Done		# if so, goto Done:
                            | 
0x03f:                      | Loop:
0x03f: 30f8feffffff00000000 | 	irmovq $0xFFFFFFFE,%r8	
0x049: 50970000000000000000 | 	mrmovq (%rdi), %r9	# read val from src...
0x053: 50a70800000000000000 | 	mrmovq 8(%rdi),%r10
0x05d: 40960000000000000000 | 	rmmovq %r9, (%rsi)	# ...and store it to dst
0x067: 40a60800000000000000 | 	rmmovq %r10,8(%rsi)
0x071: 6299                 | 	andq %r9, %r9		# val <= 0?
0x073: 718600000000000000   | 	jle test
0x07c: c0f00100000000000000 | 	iaddq $1, %rax
0x086:                      | test:
0x086: 62aa                 | 	andq %r10,%r10
0x088: 719b00000000000000   | 	jle Npos		# if so, goto Npos:
0x091: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x09b:                      | Npos:	
0x09b: c0f2feffffffffffffff | 	iaddq $-2, %rdx		# len-=2
0x0a5: c0f71000000000000000 | 	iaddq $16, %rdi		# src+=2
0x0af: c0f61000000000000000 | 	iaddq $16, %rsi		# dst+=2 
0x0b9: 6228                 | 	andq %rdx,%r8		# len>1?
0x0bb: 763f00000000000000   | 	jg Loop	
0x0c4: 6222                 | 	andq %rdx,%rdx
0x0c6: 71f800000000000000   | 	jle End		# len > 0?
0x0cf: 50a70800000000000000 | 	mrmovq 8(%rdi),%r10
0x0d9: 40a60800000000000000 | 	rmmovq %r10,8(%rsi)
0x0e3: 62aa                 | 	andq %r10,%r10
0x0e5: 71f800000000000000   | 	jle End
0x0ee: c0f00100000000000000 | 	iaddq $1, %rax
0x0f8:                      | End: 					# if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x0f8:                      | Done:
0x0f8: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x0f9:                      | End:
                            | #/* $end ncopy-ys */
0x0f9:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x100:                      | 	.align 8
0x100:                      | src:
0x100: ffffffffffffffff     | 	.quad -1
0x108: feffffffffffffff     | 	.quad -2
0x110: 0300000000000000     | 	.quad 3
0x118: 0400000000000000     | 	.quad 4
0x120: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x130:                      | 	.align 16
0x130:                      | Predest:
0x130: fadebc0000000000     | 	.quad 0xbcdefa
0x138:                      | dest:
0x138: abefcd0000000000     | 	.quad 0xcdefab
0x140: abefcd0000000000     | 	.quad 0xcdefab
0x148: abefcd0000000000     | 	.quad 0xcdefab
0x150: abefcd0000000000     | 	.quad 0xcdefab
0x158:                      | Postdest:
0x158: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x160:                      | .align 8
                            | # Run time stack
0x160: 0000000000000000     | 	.quad 0
0x168: 0000000000000000     | 	.quad 0
0x170: 0000000000000000     | 	.quad 0
0x178: 0000000000000000     | 	.quad 0
0x180: 0000000000000000     | 	.quad 0
0x188: 0000000000000000     | 	.quad 0
0x190: 0000000000000000     | 	.quad 0
0x198: 0000000000000000     | 	.quad 0
0x1a0: 0000000000000000     | 	.quad 0
0x1a8: 0000000000000000     | 	.quad 0
0x1b0: 0000000000000000     | 	.quad 0
0x1b8: 0000000000000000     | 	.quad 0
0x1c0: 0000000000000000     | 	.quad 0
0x1c8: 0000000000000000     | 	.quad 0
0x1d0: 0000000000000000     | 	.quad 0
0x1d8: 0000000000000000     | 	.quad 0
                            | 
0x1e0:                      | Stack:
